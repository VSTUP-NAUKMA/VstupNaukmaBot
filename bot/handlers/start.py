from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

reply_keyboard = [['–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –∞–∫–∞–¥–µ–º—ñ—ó', '–°–∏—Å—Ç–µ–º–∞ –≤—Å—Ç—É–ø—É'],
                  ['–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è', '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ü–µ—Å'],
                  ['–ö–æ–Ω—Ç–∞–∫—Ç–∏', '–ì—É—Ä—Ç–æ–∂–∏—Ç–∫–∏'],
                  ['–ß–∞—Ç-–ø—ñ–¥—Ç—Ä–∏–º–∫–∞', '–•–æ—á—É –ø—Ä–∏–∫–æ–ª—é—Ö—É üòú']]
keyboard_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username = user.username or str(user.id)
    first_name = user.first_name or ''
    last_name = user.last_name or ''
    phone_number = user.phone_number if hasattr(user, 'phone_number') else 'Not provided'
    user_info = f"{username}, {first_name} {last_name}, {phone_number}"

    file_path = "./usernames.txt"
    try:
        with open(file_path, "r", encoding='utf-8') as file:
            existing_users = set(file.read().splitlines())
    except FileNotFoundError:
        existing_users = set()

    if user_info not in existing_users:
        with open(file_path, "a", encoding='utf-8') as file:
            file.write(user_info + "\n")
            existing_users.add(user_info)

    if username == 'malashokk':
        await update.message.reply_text("–ü—Ä—ñ–≤—î—î—î—Ç –ù–∞—Ç–∞–ª–∫–∞üê∏", reply_markup=keyboard_markup)
    elif username == 'holychrome':
        await update.message.reply_text("–ë–æ–≥–¥–∞–Ω—á–∏–∫ –º—ñ–π –∫—Ä–∞—à", reply_markup=keyboard_markup)
    else:
        await update.message.reply_text("–¢–µ–∫—Å—Ç —Å—Ç–∞—Ä—Ç", reply_markup=keyboard_markup)


async def home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª", reply_markup=keyboard_markup)


async def fresh_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í–∞—à—ñ –¥–∞–Ω—ñ —Ç–∞ —Å—Ç–∞–Ω –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç—ñ. –ü–æ—á–Ω–µ–º–æ –∑–Ω–æ–≤—É!")
    await start(update, context)
    return ConversationHandler.END


start_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('start'), start)],
    states={
    },
    fallbacks=[],
    name="main-handler",
    persistent=True,
)
